version: '3.8'

services:
  # Main MCP Server
  mcp-server:
    build:
      context: .
      dockerfile: deploy-options/Dockerfile
      target: production
      args:
        BUILD_ENV: production
    image: frontend-mcp-server:latest
    container_name: mcp-server
    restart: unless-stopped
    environment:
      - MCP_ENVIRONMENT=production
      - MCP_LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      # Mount logs directory for persistence
      - mcp-logs:/app/logs
      # Mount data directory for any persistent data
      - mcp-data:/app/data
      # Optional: Mount custom blueprints and code-examples
      - ./frontend-mcp/blueprints:/app/blueprints:ro
      - ./frontend-mcp/code-examples:/app/code-examples:ro
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "python", "-c", "import py_server.server; print('healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      - "com.docker.compose.service=mcp-server"
      - "com.docker.compose.project=frontend-mcp"

  # Development MCP Server (for development/testing)
  mcp-server-dev:
    build:
      context: .
      dockerfile: deploy-options/Dockerfile
      target: production
      args:
        BUILD_ENV: development
    image: frontend-mcp-server:dev
    container_name: mcp-server-dev
    restart: "no"
    environment:
      - MCP_ENVIRONMENT=development
      - MCP_LOG_LEVEL=DEBUG
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      # Mount source code for development
      - ./frontend-mcp:/app:rw
      - mcp-logs-dev:/app/logs
    networks:
      - mcp-network
    profiles:
      - dev
    labels:
      - "com.docker.compose.service=mcp-server-dev"
      - "com.docker.compose.project=frontend-mcp"

  # Optional: Monitoring with Prometheus (uncomment if needed)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: mcp-prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./deploy-options/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus-data:/prometheus
  #   networks:
  #     - mcp-network
  #   profiles:
  #     - monitoring

  # Optional: Grafana for visualization (uncomment if needed)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: mcp-grafana
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #   networks:
  #     - mcp-network
  #   profiles:
  #     - monitoring

volumes:
  mcp-logs:
    driver: local
  mcp-data:
    driver: local
  mcp-logs-dev:
    driver: local
  # prometheus-data:
  #   driver: local
  # grafana-data:
  #   driver: local

networks:
  mcp-network:
    driver: bridge
    name: mcp-network
